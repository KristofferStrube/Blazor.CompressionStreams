@page "/"

@using KristofferStrube.Blazor.CompressionStreams

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

@if (compressedStreamSize is not 0)
{
    <div><label style="width:200px;">Compressed size was:</label> @compressedStreamSize</div>
}
@if (decompressedStreamSize is not 0)
{
    <div><label style="width:200px;">Decompressed size was:</label> @decompressedStreamSize</div>
}

<p>
    @content
</p>

@code {
    string content = "";
    long compressedStreamSize;
    long decompressedStreamSize;

    protected override async Task OnInitializedAsync()
    {
        // Construct a ReadableStream from text file.
var data = await HttpClient.GetStreamAsync("data/lorem.txt");
var streamRef = new DotNetStreamReference(stream: data, leaveOpen: false);
var jSStreamReference = await JSRuntime.InvokeAsync<IJSObjectReference>("jSStreamReference", streamRef);
var readableStream = await ReadableStream.CreateAsync(JSRuntime, jSStreamReference);

// Pipe the ReabableStream throught a compression stream.
var compressionStream = await CompressionStream.CreateAsync(JSRuntime, CompressionAlgorithm.DeflateRaw);
var compressedStream = await readableStream.PipeThroughAsync(compressionStream);

// Tee the ReadableStream in 2 streams.
var (tee1, tee2) = await compressedStream.TeeAsync();

// Get the total length of the first stream.
var reader = await tee1.GetDefaultReaderAsync();
await foreach (var byteArrayChunk in reader.IterateByteArraysAsync())
{
    compressedStreamSize += byteArrayChunk.Length;
}

// Pipe the second compressed stream through decompression stream.
        var decompressionStream = await DecompressionStream.CreateAsync(JSRuntime, CompressionAlgorithm.DeflateRaw);
var decompressedStream = await tee2.PipeThroughAsync(decompressionStream);

// Wirte the decompressed stream to a MemoryStream and read it.
var writeStream = new System.IO.MemoryStream();
await decompressedStream.CopyToAsync(writeStream);
decompressedStreamSize = writeStream.Length;
content = System.Text.Encoding.UTF8.GetString(writeStream.ToArray());
    }
}